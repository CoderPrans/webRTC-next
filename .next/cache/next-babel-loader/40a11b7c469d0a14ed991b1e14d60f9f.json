{"ast":null,"code":"export default function RTCinit() {\n  if (!location.hash) {\n    location.hash = Math.floor(Math.random() * 0xffffff).toString(16);\n  }\n\n  var chatHash = location.hash.substring(1);\n  var configuration = {\n    iceServers: [{\n      url: 'stun:stun.l.google.com:19302'\n    }]\n  }; // RTCPeerConnection\n\n  var pc; // RTCDataChannel\n\n  var dataChannel;\n  var drone = new Scaledrone('c4l8B2ejDQcIBLKi');\n  var roomName = \"observable-\".concat(chatHash);\n  var room; // Wait for Scaledrone signaling server to connect\n\n  drone.on('open', function (error) {\n    if (error) {\n      return console.error(error);\n    }\n\n    room = drone.subscribe(roomName);\n    room.on('open', function (error) {\n      if (error) {\n        return console.error(error);\n      }\n\n      console.log('Connected to signaling server');\n    }); // We're connected to the room and received an array of 'members'\n    // connected to the room (including us). Signaling server is ready.\n\n    room.on('members', function (members) {\n      if (members.length >= 3) {\n        return alert('The room is full');\n      } // If we are the second user to connect to the room we will be creating the offer\n\n\n      var isOfferer = members.length === 2;\n      startWebRTC(isOfferer);\n    });\n  }); // Send signaling data via Scaledrone\n\n  function sendSignalingMessage(message) {\n    drone.publish({\n      room: roomName,\n      message: message\n    });\n  }\n\n  function startWebRTC(isOfferer) {\n    console.log('Starting WebRTC in as', isOfferer ? 'offerer' : 'waiter');\n    pc = new RTCPeerConnection(configuration); // 'onicecandidate' notifies us whenever an ICE agent needs to deliver a\n    // message to the other peer through the signaling server\n\n    pc.onicecandidate = function (event) {\n      if (event.candidate) {\n        sendSignalingMessage({\n          candidate: event.candidate\n        });\n      }\n    };\n\n    if (isOfferer) {\n      // If user is offerer let them create a negotiation offer and set up the data channel\n      pc.onnegotiationneeded = function () {\n        pc.createOffer(localDescCreated, function (error) {\n          return console.error(error);\n        });\n      };\n\n      dataChannel = pc.createDataChannel('chat');\n      setupDataChannel();\n    } else {\n      // If user is not the offerer let wait for a data channel\n      pc.ondatachannel = function (event) {\n        dataChannel = event.channel;\n        setupDataChannel();\n      };\n    }\n\n    startListentingToSignals();\n  }\n\n  function setupDataChannel() {\n    checkDataChannelState();\n    dataChannel.onopen = checkDataChannelState;\n    dataChannel.onclose = checkDataChannelState; // dataChannel.onmessage = event =>\n    // insertMessageToDOM(JSON.parse(event.data), false);\n  }\n\n  function checkDataChannelState() {\n    console.log('WebRTC channel state is:', dataChannel.readyState); // if (dataChannel.readyState === 'open') {\n    //   insertMessageToDOM({content: 'WebRTC data channel is now open'});\n    // }\n  }\n\n  function startListentingToSignals() {\n    // Listen to signaling data from Scaledrone\n    room.on('data', function (message, client) {\n      // Message was sent by us\n      if (client.id === drone.clientId) {\n        return;\n      }\n\n      if (message.sdp) {\n        // This is called after receiving an offer or answer from another peer\n        pc.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {\n          console.log('pc.remoteDescription.type', pc.remoteDescription.type); // When receiving an offer lets answer it\n\n          if (pc.remoteDescription.type === 'offer') {\n            console.log('Answering offer');\n            pc.createAnswer(localDescCreated, function (error) {\n              return console.error(error);\n            });\n          }\n        }, function (error) {\n          return console.error(error);\n        });\n      } else if (message.candidate) {\n        // Add the new ICE candidate to our connections remote description\n        pc.addIceCandidate(new RTCIceCandidate(message.candidate));\n      }\n    });\n  }\n\n  function localDescCreated(desc) {\n    pc.setLocalDescription(desc, function () {\n      return sendSignalingMessage({\n        sdp: pc.localDescription\n      });\n    }, function (error) {\n      return console.error(error);\n    });\n  }\n\n  alert('Chat location is: ' + location.href);\n}","map":{"version":3,"sources":["/home/coder-prans/Desktop/develop.../web-chat/RTCinit.js"],"names":["RTCinit","location","hash","Math","floor","random","toString","chatHash","substring","configuration","iceServers","url","pc","dataChannel","drone","Scaledrone","roomName","room","on","error","console","subscribe","log","members","length","alert","isOfferer","startWebRTC","sendSignalingMessage","message","publish","RTCPeerConnection","onicecandidate","event","candidate","onnegotiationneeded","createOffer","localDescCreated","createDataChannel","setupDataChannel","ondatachannel","channel","startListentingToSignals","checkDataChannelState","onopen","onclose","readyState","client","id","clientId","sdp","setRemoteDescription","RTCSessionDescription","remoteDescription","type","createAnswer","addIceCandidate","RTCIceCandidate","desc","setLocalDescription","localDescription","href"],"mappings":"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","sourcesContent":["export default function RTCinit() {\n  if (!location.hash) {\n    location.hash = Math.floor(Math.random() * 0xffffff).toString(16);\n  }\n  const chatHash = location.hash.substring(1);\n\n  const configuration = {\n    iceServers: [\n      {\n        url: 'stun:stun.l.google.com:19302',\n      },\n    ],\n  };\n  // RTCPeerConnection\n  let pc;\n  // RTCDataChannel\n  let dataChannel;\n\n  const drone = new Scaledrone('c4l8B2ejDQcIBLKi');\n\n  const roomName = `observable-${chatHash}`;\n\n  let room;\n\n  // Wait for Scaledrone signaling server to connect\n  drone.on('open', function(error) {\n    if (error) {\n      return console.error(error);\n    }\n    room = drone.subscribe(roomName);\n    room.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      console.log('Connected to signaling server');\n    });\n    // We're connected to the room and received an array of 'members'\n    // connected to the room (including us). Signaling server is ready.\n    room.on('members', function(members) {\n      if (members.length >= 3) {\n        return alert('The room is full');\n      }\n      // If we are the second user to connect to the room we will be creating the offer\n      const isOfferer = members.length === 2;\n      startWebRTC(isOfferer);\n    });\n  });\n\n  // Send signaling data via Scaledrone\n  function sendSignalingMessage(message) {\n    drone.publish({\n      room: roomName,\n      message,\n    });\n  }\n\n  function startWebRTC(isOfferer) {\n    console.log('Starting WebRTC in as', isOfferer ? 'offerer' : 'waiter');\n    pc = new RTCPeerConnection(configuration);\n\n    // 'onicecandidate' notifies us whenever an ICE agent needs to deliver a\n    // message to the other peer through the signaling server\n    pc.onicecandidate = event => {\n      if (event.candidate) {\n        sendSignalingMessage({candidate: event.candidate});\n      }\n    };\n\n    if (isOfferer) {\n      // If user is offerer let them create a negotiation offer and set up the data channel\n      pc.onnegotiationneeded = () => {\n        pc.createOffer(localDescCreated, error => console.error(error));\n      };\n      dataChannel = pc.createDataChannel('chat');\n      setupDataChannel();\n    } else {\n      // If user is not the offerer let wait for a data channel\n      pc.ondatachannel = event => {\n        dataChannel = event.channel;\n        setupDataChannel();\n      };\n    }\n\n    startListentingToSignals();\n  }\n\n  function setupDataChannel() {\n    checkDataChannelState();\n    dataChannel.onopen = checkDataChannelState;\n    dataChannel.onclose = checkDataChannelState;\n    // dataChannel.onmessage = event =>\n    // insertMessageToDOM(JSON.parse(event.data), false);\n  }\n\n  function checkDataChannelState() {\n    console.log('WebRTC channel state is:', dataChannel.readyState);\n    // if (dataChannel.readyState === 'open') {\n    //   insertMessageToDOM({content: 'WebRTC data channel is now open'});\n    // }\n  }\n  function startListentingToSignals() {\n    // Listen to signaling data from Scaledrone\n    room.on('data', (message, client) => {\n      // Message was sent by us\n      if (client.id === drone.clientId) {\n        return;\n      }\n      if (message.sdp) {\n        // This is called after receiving an offer or answer from another peer\n        pc.setRemoteDescription(\n          new RTCSessionDescription(message.sdp),\n          () => {\n            console.log('pc.remoteDescription.type', pc.remoteDescription.type);\n            // When receiving an offer lets answer it\n            if (pc.remoteDescription.type === 'offer') {\n              console.log('Answering offer');\n              pc.createAnswer(localDescCreated, error => console.error(error));\n            }\n          },\n          error => console.error(error),\n        );\n      } else if (message.candidate) {\n        // Add the new ICE candidate to our connections remote description\n        pc.addIceCandidate(new RTCIceCandidate(message.candidate));\n      }\n    });\n  }\n  function localDescCreated(desc) {\n    pc.setLocalDescription(\n      desc,\n      () => sendSignalingMessage({sdp: pc.localDescription}),\n      error => console.error(error),\n    );\n  }\n  alert('Chat location is: ' + location.href);\n}\n"]},"metadata":{},"sourceType":"module"}